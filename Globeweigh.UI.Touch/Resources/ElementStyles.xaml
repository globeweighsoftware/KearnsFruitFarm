<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:Controls="clr-namespace:Globeweigh.UI.Shared.Controls;assembly=Globeweigh.UI.Shared"
                    xmlns:dxg="http://schemas.devexpress.com/winfx/2008/xaml/grid"
                    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
                    xmlns:dxe="http://schemas.devexpress.com/winfx/2008/xaml/editors"
                    xmlns:shared="clr-namespace:Globeweigh.UI.Shared;assembly=Globeweigh.UI.Shared"
                    xmlns:dx="http://schemas.devexpress.com/winfx/2008/xaml/core"
                    xmlns:native="http://schemas.devexpress.com/winfx/2008/xaml/core/internal"
                    xmlns:themes="http://schemas.devexpress.com/winfx/2008/xaml/editors/themekeys"
                    xmlns:touch="clr-namespace:Globeweigh.UI.Touch">

    <Style x:Key="WindowBaseStyle" TargetType="{x:Type touch:WindowBase}">
        <Setter Property="shared:ViewModelBehavior.LoadUnload" Value="True"/>
    </Style>

    <Style x:Key="GreyHeaderTextBlockStyle" TargetType="{x:Type TextBlock}">
        <Setter Property="TextWrapping" Value="NoWrap"/>
        <Setter Property="TextTrimming" Value="None"/>
        <Setter Property="FontSize" Value="20"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="Foreground" Value="{DynamicResource DarkGreyBrush}"/>
    </Style>

    <Style TargetType="{x:Type Border}" x:Key="BorderBlurStyle">
        <Setter Property="BorderThickness" Value="0,0,0,0.8" />
        <Setter Property="BorderBrush" Value="{DynamicResource ItemBorderBrush}" />
    </Style>

    <Style x:Key="DateNavigateButtonStyle" TargetType="{x:Type Controls:NavigationButton}">
        <Setter Property="OverridesDefaultStyle" Value="True"/>
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="FontSize" Value="18"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Controls:NavigationButton}">
                    <Border x:Name="border" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding Foreground}" Background="{TemplateBinding Background}">
                        <Grid >
                            <Image Source="{Binding ImageSource, RelativeSource={RelativeSource TemplatedParent}}"/>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="BorderThickness" Value="2"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="PrimaryButtonStyle" TargetType="Button">
        <Setter Property="OverridesDefaultStyle" Value="True"/>
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="Foreground" Value="{DynamicResource GlobeweighBlueBrush}"/>
        <Setter Property="FontSize" Value="20"/>
        <Setter Property="Background" Value="White"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="BorderBrush" Value="{DynamicResource MainNavyBrush}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border Name="border" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Background}">
                        <Grid >
                            <TextBlock Text="{TemplateBinding Content}" FontSize="{TemplateBinding FontSize}" TextWrapping="Wrap" HorizontalAlignment="Center" TextAlignment="Center" VerticalAlignment="Center" Name="content" FontWeight="Bold" Foreground="{TemplateBinding Foreground}"/>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Background" Value="{DynamicResource ItemBorderBrush}"/>
                            <Setter Property="Foreground" Value="White"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="BorderBrush" Value="{DynamicResource ItemBorderBrush}" />
                            <Setter Property="Foreground" Value="{DynamicResource ItemBorderBrush}" />
                        </Trigger>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="RoundedButtonStyle" TargetType="Button">
        <Setter Property="OverridesDefaultStyle" Value="True"/>
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="Foreground" Value="#FF2C7EDC"/>
        <Setter Property="FontSize" Value="17"/>
        <Setter Property="Background" Value="White"/>
        <Setter Property="BorderThickness" Value="2"/>
        <Setter Property="BorderBrush" Value="{DynamicResource ItemBorderBrush}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border Name="border" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Background}" CornerRadius="4">
                        <Grid >
                            <TextBlock Text="{TemplateBinding Content}" Foreground="{TemplateBinding Foreground}" FontSize="{TemplateBinding FontSize}" HorizontalAlignment="Center" VerticalAlignment="Center" Name="content" FontWeight="Bold"/>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Background" Value="{DynamicResource ItemBorderBrush}"/>
                            <Setter Property="Foreground" Value="White"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="BorderBrush" Value="{DynamicResource ItemBorderBrush}" />
                            <Setter Property="Foreground" Value="{DynamicResource ItemBorderBrush}" />
                        </Trigger>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="TransactionButtonStyle" TargetType="Button">
        <Setter Property="OverridesDefaultStyle" Value="True"/>
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="Foreground" Value="#FFED74A6"/>
        <Setter Property="FontSize" Value="22"/>
        <Setter Property="Height" Value="50"/>
        <Setter Property="Background" Value="White"/>
        <Setter Property="BorderThickness" Value="2"/>
        <Setter Property="BorderBrush" Value="{DynamicResource MainNavyBrush}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border Name="border" BorderThickness="{TemplateBinding BorderThickness}" Padding="4,2" BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Background}" CornerRadius="4">
                        <Grid >
                            <TextBlock Text="{TemplateBinding Content}" Foreground="{TemplateBinding Foreground}" FontSize="{TemplateBinding FontSize}" HorizontalAlignment="Center" VerticalAlignment="Center" Name="content" Margin="0,0,0,4"/>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Background" Value="#FFED74A6"/>
                            <Setter Property="Foreground" Value="White"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Background" Value="#FFA9B3C4" />
                            <Setter Property="Foreground" Value="White"/>
                        </Trigger>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="TransactionBorderContentStyle" TargetType="{x:Type ContentControl}">
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="BorderThickness" Value="2"/>
        <Setter Property="BorderBrush" Value="{DynamicResource ItemBorderBrush}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ContentControl}">
                    <Grid Margin="10">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="2*"/>
                            <RowDefinition Height="3*"/>
                        </Grid.RowDefinitions>
                        <TextBlock Text="{Binding LabelText, RelativeSource={RelativeSource AncestorType=Controls:TransactionContentControl}}" Foreground="{TemplateBinding Foreground}" Margin="2,0,0,0"/>
                        <Border x:Name="outsideBorder" Visibility="Collapsed" BorderBrush="{DynamicResource PinkBrush}" Opacity="0.2" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="4" Grid.Row="1" Padding="0">

                        </Border>
                        <Border x:Name="insideBorder" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="2" Grid.Row="1" BorderBrush="{TemplateBinding BorderBrush}" Margin="2">
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsKeyboardFocusWithin" Value="True">
                            <Setter TargetName="outsideBorder" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="insideBorder" Property="BorderBrush" Value="{DynamicResource PinkBrush}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ComboBoxEditNonPopupStyle" TargetType="{x:Type dxe:ComboBoxEdit}">
        <Setter Property="shared:ElementBehaviours.PopupSuppressed" Value="True"/>
        <Setter Property="shared:ElementBehaviours.MouseUpCommandName" Value="RefDataComboBoxMouseUp"/>
        <Setter Property="IsTextEditable" Value="False"/>
        <Setter Property="ShowEditorButtons" Value="False"/>
        <Setter Property="FontSize" Value="20"/>
        <Setter Property="Foreground" Value="{DynamicResource darkGrayForegroundBrush}"/>
        <Setter Property="Background" Value="White"/>
        <Setter Property="BorderTemplate" Value="{DynamicResource ComboBoxEditNonPopupBorderTemplate}"/>
    </Style>

    <ControlTemplate x:Key="ComboBoxEditNonPopupBorderTemplate" TargetType="{x:Type ContentControl}">
        <Grid x:Name="Grid1" Background="White" MinWidth="0" MinHeight="0">
            <dx:DXBorder x:Name="Border" BorderBrush="{DynamicResource ItemBorderBrush}" BorderThickness="0" EnableDPICorrection="True"/>
            <ContentPresenter ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" Margin="0,1"/>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" TargetName="Border" Value="0.35"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style x:Key="TransactionContentStyleBase" TargetType="{x:Type Controls:TransactionContentControl}">
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="TextBlockHorizontalAlignment" Value="Stretch"/>
        <Setter Property="TextBlockVerticalAlignment" Value="Stretch"/>
        <Setter Property="TextWrapping" Value="NoWrap"/>
        <Setter Property="LabelTextFontSize" Value="20"/>
        <Setter Property="TextDataFontSize" Value="20"/>
        <Setter Property="LabelTextForeground" Value="{DynamicResource MainNavyBrush}"/>
        <Setter Property="Foreground" Value="{DynamicResource MainNavyBrush}"/>
        <Setter Property="BorderThickness" Value="2"/>
        <Setter Property="BorderBrush" Value="{DynamicResource ItemBorderBrush}"/>
        <Setter Property="FocusedBorderBrush" Value="{DynamicResource PinkBrush}"/>
        <Setter Property="Focusable" Value="True"/>
    </Style>

    <Style x:Key="TransactionTextBlockContentStyle" TargetType="{x:Type Controls:TransactionContentControl}" BasedOn="{StaticResource TransactionContentStyleBase}">
        <Setter Property="Template">
                <Setter.Value>
                <ControlTemplate TargetType="{x:Type Controls:TransactionContentControl}">
                    <Grid Margin="10">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="40"/>
                            <RowDefinition Height="*"/>
                        </Grid.RowDefinitions>
                        <Label x:Name="label"  Content="{Binding LabelText, RelativeSource={RelativeSource AncestorType=Controls:TransactionContentControl}}" VerticalContentAlignment="Center" FontSize="{TemplateBinding LabelTextFontSize}" Foreground="{TemplateBinding LabelTextForeground}" Margin="2,0,0,0" VerticalAlignment="Center" Height="Auto" Grid.Column="1"/>
                        <Border x:Name="border" BorderThickness="{TemplateBinding BorderThickness}" Background="Transparent" CornerRadius="2" Grid.Row="1" BorderBrush="{TemplateBinding BorderBrush}" Margin="2"  Height="36">
                            <TextBlock x:Name="textBlock" Text="{TemplateBinding Text}"  FontSize="{TemplateBinding TextDataFontSize}" TextWrapping="{TemplateBinding TextWrapping}" VerticalAlignment="Center" HorizontalAlignment="{TemplateBinding TextBlockHorizontalAlignment}" Margin="4,0,0,0"/>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="HideBorder" Value="True">
                            <Setter TargetName="border" Property="BorderThickness" Value="0"/>
                        </Trigger>
                        <Trigger Property="HideLabel" Value="True">
                            <Setter TargetName="label" Property="Visibility" Value="Collapsed"/>
                            <Setter TargetName="border" Property="Height" Value="Auto"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="TransactionTextBlockOnlyPopupContentStyle" TargetType="{x:Type Controls:TransactionContentControl}" BasedOn="{StaticResource TransactionContentStyleBase}">
        <Setter Property="shared:ElementBehaviours.MouseUpCommandName" Value="MouseUpCommand"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Controls:TransactionContentControl}">
                    <Grid Margin="10">
                        <Border x:Name="border" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" CornerRadius="2" BorderBrush="{TemplateBinding BorderBrush}" Margin="2"  Height="Auto">
                            <TextBlock x:Name="textBlock" Text="{TemplateBinding Text}"  FontSize="{TemplateBinding TextDataFontSize}" TextWrapping="{TemplateBinding TextWrapping}" VerticalAlignment="Center" HorizontalAlignment="{TemplateBinding TextBlockHorizontalAlignment}" Margin="4,0,30,0" FontFamily="Segoe UI Semibold"/>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="HideBorder" Value="True">
                            <Setter TargetName="border" Property="BorderThickness" Value="0"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="TransactionTextBlockPopupContentStyle" TargetType="{x:Type Controls:TransactionContentControl}" BasedOn="{StaticResource TransactionTextBlockContentStyle}">
        <Setter Property="shared:ElementBehaviours.MouseUpCommandName" Value="MouseUpCommand"/>
        <Setter Property="BorderBrush" Value="{DynamicResource MainNavyBrush}"/>
        <Style.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="Text" Value="{x:Null}"/>
                    <Condition Property="IsMandatory" Value="True" />
                </MultiTrigger.Conditions>
                <MultiTrigger.Setters>
                    <Setter Property="BorderBrush" Value="{DynamicResource PinkBrush}"/>
                </MultiTrigger.Setters>
            </MultiTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="TransactionComboBoxContentStyle" TargetType="{x:Type Controls:TransactionContentControl}" BasedOn="{StaticResource TransactionContentStyleBase}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Controls:TransactionContentControl}">
                    <Grid Margin="10">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="40"/>
                            <RowDefinition Height="*"/>
                        </Grid.RowDefinitions>
                        <TextBlock Text="{Binding LabelText, RelativeSource={RelativeSource AncestorType=Controls:TransactionContentControl}}" Foreground="{TemplateBinding LabelTextForeground}" FontSize="{TemplateBinding LabelTextFontSize}" Margin="2,0,0,0" VerticalAlignment="Center"/>
                        <Border BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="2" Grid.Row="1" BorderBrush="{TemplateBinding BorderBrush}" Margin="2">
                            <dxe:ComboBoxEdit ItemsSource="{TemplateBinding ItemsSource}" DisplayMember="{TemplateBinding DisplayMember}" ValueMember="{TemplateBinding ValueMember}" FontSize="{TemplateBinding TextDataFontSize}" Style="{DynamicResource ComboBoxEditNonPopupStyle}" EditValue="{TemplateBinding EditValue}" VerticalAlignment="Center"/>
                        </Border>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="TransactionComboBoxPopupContentStyle" TargetType="{x:Type Controls:TransactionContentControl}" BasedOn="{StaticResource TransactionComboBoxContentStyle}">
        <Setter Property="shared:ElementBehaviours.MouseUpCommandName" Value="MouseUpCommand"/>
        <Setter Property="BorderBrush" Value="{DynamicResource MainNavyBrush}"/>
        <Style.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="EditValue" Value="0"/>
                    <Condition Property="IsMandatory" Value="True" />
                </MultiTrigger.Conditions>
                <MultiTrigger.Setters>
                    <Setter Property="BorderBrush" Value="{DynamicResource PinkBrush}"/>
                </MultiTrigger.Setters>
            </MultiTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="TransactionBorderStyleBase" TargetType="{x:Type Border}">
        <Setter Property="Background" Value="{DynamicResource TransactionHeaderFooterBorderBrush}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource DividerLineGrayBrush}"/>
    </Style>

    <Style x:Key="TransactionBorderHeaderStyle" TargetType="{x:Type Border}" BasedOn="{StaticResource TransactionBorderStyleBase}">
        <Setter Property="Height" Value="70"/>
        <Setter Property="BorderThickness" Value="0,0,0,1"/>
    </Style>

    <Style x:Key="TransactionBorderFooterStyle" TargetType="{x:Type Border}" BasedOn="{StaticResource TransactionBorderStyleBase}">
        <Setter Property="Height" Value="100"/>
        <Setter Property="BorderThickness" Value="0,1,0,0"/>
    </Style>

    <Style x:Key="RadioSwitchStyle" TargetType="{x:Type RadioButton}">
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Foreground" Value="Black"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RadioButton}">
                    <Border Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{DynamicResource ItemBorderBrush}">
                        <TextBlock Text="{TemplateBinding Content}" Foreground="{TemplateBinding Foreground}" VerticalAlignment="Center" HorizontalAlignment="Center" FontSize="24"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="Background"  Value="#FF424242"/>
                            <Setter Property="Foreground"  Value="White"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="CheckEditStyle" TargetType="{x:Type dxe:CheckEdit}">
        <Setter Property="BorderThickness" Value="2"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate  TargetType="{x:Type dxe:CheckEdit}">
                    <dxe:EditorControl x:Name="PART_Content" Focusable="False" BorderThickness="{TemplateBinding BorderThickness}">
                        <dxe:EditorControl.Template>
                            <ControlTemplate TargetType="{x:Type dxe:EditorControl}">
                                <dxe:CheckEditBox x:Name="PART_Editor" Style="{DynamicResource {themes:CheckEditThemeKey ResourceKey=CheckEditBoxStyle}}" BorderThickness="{TemplateBinding BorderThickness}" >
                                    <dxe:CheckEditBox.Template>
                                        <ControlTemplate TargetType="{x:Type dxe:CheckEditBox}">
                                            <Grid x:Name="grid" Background="Transparent" SnapsToDevicePixels="True">
                                                <VisualStateManager.VisualStateGroups>
                                                    <VisualStateGroup x:Name="CommonStates">
                                                        <VisualState x:Name="Normal"/>
                                                        <VisualState x:Name="Disabled">
                                                            <Storyboard>
                                                                <DoubleAnimation Duration="0" To="0.35" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="contentPresenter"/>
                                                                <DoubleAnimation Duration="0" To="0.35" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="CheckBox"/>
                                                            </Storyboard>
                                                        </VisualState>
                                                    </VisualStateGroup>
                                                    <VisualStateGroup x:Name="CheckStates">
                                                        <VisualState x:Name="Checked">
                                                            <Storyboard>
                                                                <DoubleAnimation Duration="0" To="1" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="check"/>
                                                            </Storyboard>
                                                        </VisualState>
                                                        <VisualState x:Name="Unchecked"/>
                                                        <VisualState x:Name="Indeterminate">
                                                            <Storyboard>
                                                                <DoubleAnimation Duration="0" To="1" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="IndeterminateState"/>
                                                            </Storyboard>
                                                        </VisualState>
                                                    </VisualStateGroup>
                                                </VisualStateManager.VisualStateGroups>
                                                <Grid Margin="{TemplateBinding Padding}">
                                                    <Grid.ColumnDefinitions>
                                                        <ColumnDefinition Width="*"/>
                                                        <ColumnDefinition Width="Auto"/>
                                                    </Grid.ColumnDefinitions>
                                                    <Grid x:Name="CheckBox" Height="Auto" Margin="4" Width="Auto" >
                                                        <native:MultiContentControl x:Name="MultiContentControl" Focusable="False"  VisibleChildIndex="0">
                                                            <dx:DXBorder BorderBrush="Black" BorderThickness="{TemplateBinding BorderThickness}" Background="{x:Null}" EnableDPICorrection="True" />
                                                            <!--<dx:DXBorder BorderBrush="#FF379BFF" BorderThickness="{TemplateBinding BorderThickness}" Background="#FFF3F9FF" EnableDPICorrection="True" />
                                                            <dx:DXBorder BorderBrush="#FF057FDF" BorderThickness="{TemplateBinding BorderThickness}" Background="#FFD9ECFF" EnableDPICorrection="True"/>-->
                                                        </native:MultiContentControl>
                                                        <dx:DXBorder x:Name="FocusElement" BorderBrush="#FF0072C6" BorderThickness="{TemplateBinding BorderThickness}" EnableDPICorrection="True" Opacity="0" />
                                                        <dx:DXBorder x:Name="IndeterminateState" Background="#FF222222" EnableDPICorrection="True" HorizontalAlignment="Center" Height="7" Opacity="0" VerticalAlignment="Center" Width="7"/>
                                                        <Path x:Name="check" Data="F1M2.48437,9L-1.02756E-07,6 -6.30195E-08,3.42969 2.54687,6.52344 9,0.507813 9,3 2.48437,9z" Fill="Black" HorizontalAlignment="Center" Height="Auto" Margin="12" Opacity="0" Stretch="Fill" VerticalAlignment="Center" Width="Auto" Stroke="White"/>
                                                    </Grid>
                                                    <ContentPresenter x:Name="contentPresenter" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" Grid.Column="1" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="4,0,0,0" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                                                        <ContentPresenter.Visibility>
                                                            <Binding Path="HasContent" RelativeSource="{RelativeSource TemplatedParent}">
                                                                <Binding.Converter>
                                                                    <dx:BoolToVisibilityConverter/>
                                                                </Binding.Converter>
                                                            </Binding>
                                                        </ContentPresenter.Visibility>
                                                    </ContentPresenter>
                                                </Grid>
                                            </Grid>
                                        </ControlTemplate>
                                    </dxe:CheckEditBox.Template>
                                </dxe:CheckEditBox>
                            </ControlTemplate>
                        </dxe:EditorControl.Template>
                    </dxe:EditorControl>
                    <ControlTemplate.Triggers>
                        <Trigger Property="EditMode" Value="InplaceInactive">
                            <Setter Property="HorizontalAlignment" Value="Center"/>
                        </Trigger>
                        <Trigger Property="EditMode" Value="InplaceActive">
                            <Setter Property="HorizontalAlignment" Value="Center"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>

            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ToolbarButtonStyle" TargetType="{x:Type Controls:ImageButton}">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="FontSize" Value="16"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="Foreground" Value="Black"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Controls:ImageButton}">
                    <Border  x:Name="Bd"  Height="30" BorderThickness="1" BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Background}">
                        <Grid  Background="{TemplateBinding Background}">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="30"/>
                                <ColumnDefinition Width="*"/>
                            </Grid.ColumnDefinitions>
                            <Image Source="{Binding ImageSource, RelativeSource={RelativeSource TemplatedParent}}" Margin="4"/>
                            <Border SnapsToDevicePixels="true" Grid.Row="0" Grid.Column="1" >
                                <TextBlock Text="{TemplateBinding Content}" Foreground="{TemplateBinding Foreground}" TextAlignment="Center" TextWrapping="Wrap" HorizontalAlignment="Left"  VerticalAlignment="Center" FontSize="{TemplateBinding FontSize}" Margin="2,0,10,0" FontFamily="Segoe UI"  />
                            </Border>
                            <ContentPresenter Grid.RowSpan="2" Content="" Grid.ColumnSpan="2"/>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="BorderBrush" Value="Black"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="BorderBrush" Value="{DynamicResource ItemBorderBrush}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Foreground" Value="Gray"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ImageOnlyButtonStyle" TargetType="{x:Type Controls:ImageButton}">
        <Setter Property="OverridesDefaultStyle" Value="True"/>
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="FontSize" Value="18"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Controls:ImageButton}">
                    <Border x:Name="border" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Background}">
                        <Grid >
                            <Image Source="{Binding ImageSource, RelativeSource={RelativeSource TemplatedParent}}"/>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="BorderThickness" Value="2"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


</ResourceDictionary>